@testset "Bootstrapping and PDEs" begin
    LinearAlgebra.BLAS.set_num_threads(1)
    x_scale = 1000.0
    t_scale = 24.0
    alphabet = join('a':'z')
    fontsize = 20
    colors = [:black, :blue, :red, :magenta, :green]
    legendentries = OrderedDict("0" => LineElement(linestyle=nothing, linewidth=2.0, color=colors[1]),
        "12" => LineElement(linestyle=nothing, linewidth=2.0, color=colors[2]),
        "24" => LineElement(linestyle=nothing, linewidth=2.0, color=colors[3]),
        "36" => LineElement(linestyle=nothing, linewidth=2.0, color=colors[4]),
        "48" => LineElement(linestyle=nothing, linewidth=2.0, color=colors[5]))
    K = 1.7e-3 * x_scale^2
    δt = LinRange(0.0, 48.0 / t_scale, 5)
    finalTime = 48.0 / t_scale
    N = 1000
    LHS = [0.0, 1.0, 0.0]
    RHS = [0.0, -1.0, 0.0]
    alg = Tsit5()
    N_thin = 38
    meshPoints = LinRange(25.0 / x_scale, 1875.0 / x_scale, 500)
    pde_setup = PDE_Setup(meshPoints, LHS, RHS, finalTime, δt, alg)
    nₓ = 30
    nₜ = 30
    bootₓ = LinRange(25.0 / x_scale, 1875.0 / x_scale, nₓ)
    bootₜ = LinRange(0.0, 48.0 / t_scale, nₜ)
    B = 100
    τ = (0.0, 0.0)
    Optim_Restarts = 10
    constrained = false
    obj_scale_GLS = log
    obj_scale_PDE = log
    show_losses = false
    init_weight = 10.0
    bootstrap_setup = Bootstrap_Setup(bootₓ, bootₜ, B, τ, Optim_Restarts, constrained, obj_scale_GLS, obj_scale_PDE, init_weight, show_losses)
    num_restarts = 250
    ℓₓ = log.([1e-7, 2.0])
    ℓₜ = log.([1e-7, 2.0])
    nugget = 1e-5
    GP_Restarts = 250
    optim_setup = Optim.Options(iterations=10, f_reltol=1e-4, x_reltol=1e-4, g_reltol=1e-4, outer_f_reltol=1e-4, outer_x_reltol=1e-4, outer_g_reltol=1e-4)

    # Is generate_data working?
    Random.seed!(51021)
    x₀ = [0.075, 0.125, 0.175, 0.225, 0.275, 0.325, 0.375, 0.425, 0.475, 0.525, 0.575, 0.625, 0.675, 0.725, 0.775, 0.825, 0.875, 0.925, 0.975, 1.025, 1.075, 1.125, 1.175, 1.225, 1.275, 1.325, 1.375, 1.425, 1.475, 1.525, 1.575, 1.625, 1.675, 1.725, 1.775, 1.825, 1.875]
    u₀ = [312.0, 261.0, 233.0, 303.0, 252.0, 252.0, 228.0, 242.0, 238.0, 191.0, 135.0, 140.0, 131.0, 79.3, 46.6, 37.3, 46.6, 46.6, 74.6, 65.3, 28.0, 37.3, 14.0, 4.66, 14.0, 0.0, 9.32, 0.0, 28.0, 97.89999999999999, 172.0, 252.0, 368.0, 350.0, 410.0, 331.0, 350.0]
    T = (t, α, p) -> 1.0
    D = (u, β, p) -> β[1] * p[1]
    D′ = (u, β, p) -> 0.0
    R = (u, γ, p) -> γ[1] * p[2] * u * (1.0 - u / p[1])
    R′ = (u, γ, p) -> γ[1] * p[2] - 2.0 * γ[1] * p[2] * u / p[1]
    α = Vector{Float64}([])
    β = [301.0] * t_scale / x_scale^2
    γ = [0.044] * t_scale
    T_params = Vector{Float64}([])
    D_params = [1.0]
    R_params = [K, 1.0]
    x, t, u, datgp = generate_data(x₀, u₀, T, D, R, D′, R′, α, β, γ, δt, finalTime; N, LHS, RHS, alg, N_thin, num_restarts, D_params, R_params, T_params)
    x_pde = copy(x)
    t_pde = copy(t)
    u_pde = copy(u)
    @test all((mean(x), median(x), sum(x), median(x .^ 2)) .≈ (0.9878378378378378510404900225694291293621063232421875, 0.98851351351351357532593056021141819655895233154296875, 197.567567567567579089882201515138149261474609375, 0.9777076231637042980082696885801851749420166015625))
    @test all((mean(t), median(t), sum(t), median(t .^ 2), median(t .* x)) .≈ (1.0, 1.0, 200.0, 1.0, 0.72381756756756754356274541351012885570526123046875))
    @test all((mean(u), median(u), median(x .+ t .+ u), sum(u), mean(u .* x), median(u .^ 2 + t .^ 2)) .≈ (392.67801940269919214188121259212493896484375, 324.355573272228184578125365078449249267578125, 325.9019727283356360203470103442668914794921875, 78535.603880539842066355049610137939453125, 378.72520401430250558405532501637935638427734375, 105208.2857962714624591171741485595703125))

    # Is precompute_gp_mean working correctly?
    Random.seed!(51565021)
    σ = log.([1e-6, 7std(u)])
    σₙ = log.([1e-6, 7std(u)])
    gp, μ, L = precompute_gp_mean(x, t, u, ℓₓ, ℓₜ, σ, σₙ, nugget, 250, bootstrap_setup)
    gp_setup = GP_Setup(u; ℓₓ, ℓₜ, σ, σₙ, GP_Restarts=250, μ, L, nugget, gp)
    @test gp.mll ≈ -916.4090604839076377174933440983295440673828125
    @test gp.kernel.iℓ2 ≈ [24.848271043357780030191861442290246486663818359375, 0.50351492501511796451296731902402825653553009033203125]
    @test gp.kernel.σ2 ≈ 470228.280927253770641982555389404296875
    @test gp.logNoise.value ≈ 2.768972584706740125426449594669975340366363525390625
    @test sum(μ) ≈ 118447.9823014237917959690093994140625 atol = 1e-2
    @test prod(abs.(log.(abs.(μ))) .^ (0.0001)) ≈ 1.9725690946066529729563399087055586278438568115234375 atol = 1e-2
    @test median(μ) ≈ 328.727061483266879804432392120361328125 atol = 1e-2
    @test mean(μ) ≈ 32.9022173059510549819606239907443523406982421875 atol = 1e-2
    @test mean(sin.(μ)) ≈ 0.00327221448586760034482612269357559853233397006988525390625 atol = 1e-2
    @test mean(L) ≈ 0.050455323132358405324726646767885540612041950225830078125 atol = 1e-2
    @test sum(Symmetric(L)) ≈ 1630.94370781971292672096751630306243896484375 atol = 1e-2
    @test Symmetric(L)[2, 2] ≈ 6.4082678098058050153440490248613059520721435546875 atol = 1e-2
    @test sum(eigen(Symmetric(L)[1:200, 1:200]).values) ≈ 39.3703289851220716855095815844833850860595703125 atol = 1e-2
    @test median(Symmetric(L)) ≈ 0.0 atol = 1e-2

    # Is bootstrap_gp working correctly?
    Random.seed!(99992001)
    T = (t, α, p) -> 1.0
    D = (u, β, p) -> β[1] * p[1]
    D′ = (u, β, p) -> 0.0
    R = (u, γ, p) -> γ[1] * p[2] * u * (1.0 - u / p[1])
    R′ = (u, γ, p) -> γ[1] * p[2] - 2.0 * γ[1] * p[2] * u / p[1]
    T_params = Vector{Float64}([])
    D_params = [301.0] * t_scale / x_scale^2
    R_params = [K, 0.044 * t_scale]
    α₀ = Vector{Float64}([])
    β₀ = [1.0]
    γ₀ = [1.0]
    lowers = [0.99, 0.9]
    uppers = [0.99, 1.1]
    bootstrap_setup = @set bootstrap_setup.B = 20
    bootstrap_setup = @set bootstrap_setup.show_losses = false
    bootstrap_setup = @set bootstrap_setup.Optim_Restarts = 2
    bgp1 = bootstrap_gp(x, t, u, T, D, D′, R, R′, α₀, β₀, γ₀, lowers, uppers; gp_setup, bootstrap_setup, optim_setup, pde_setup, D_params, R_params, T_params, verbose=false)
    @test size(bgp1.delayBases) == (0, 20)
    @test bgp1.diffusionBases ≈ Matrix([0.97321641140516657042525139331701211631298065185546875
        0.87835382666735151158121652770205400884151458740234375
        0.88662124317559942721089782935450784862041473388671875
        0.9721507226770942367011230089701712131500244140625
        0.9196230915823584428636650045518763363361358642578125
        0.90150971970351168049973011875408701598644256591796875
        0.8236591081170046013681940166861750185489654541015625
        0.89534911262218652705513477485510520637035369873046875
        0.79319341911314211746031332950224168598651885986328125
        0.9335612579633976171322728987433947622776031494140625
        0.85900995274442326632424737908877432346343994140625
        0.86767039258748968055812156308093108236789703369140625
        0.85046200816517603104927047752426005899906158447265625
        0.74316736312468634206851447743247263133525848388671875
        0.94626211576536201075526832937612198293209075927734375
        0.8967152155713302708051060108118690550327301025390625
        0.8523733425791475415422837613732554018497467041015625
        0.967357757409468721476741848164238035678863525390625
        0.9930098826399014200205783708952367305755615234375
        0.9467766526676333338485846979892812669277191162109375]') atol = 1e-3
    @test bgp1.reactionBases ≈ Matrix([1.004286058058138753068533333134837448596954345703125
        1.009691881208043096052051623701117932796478271484375
        0.9877662008769318990886176834465004503726959228515625
        1.0022140860304620257892338486271910369396209716796875
        1.0087373817430040912057620516861788928508758544921875
        0.99997032557508347405672566310386173427104949951171875
        0.99786048324371956486089629834168590605258941650390625
        1.00826699220420845648504837299697101116180419921875
        0.993301046061558334798746727756224572658538818359375
        0.9967734718791672055004937647026963531970977783203125
        1.0092219516841158810649403676507063210010528564453125
        1.0011109046742745487534875792334787547588348388671875
        0.9975280857168453696459664570284076035022735595703125
        0.9928737301486016963991687589441426098346710205078125
        1.008349773405690985583760266308672726154327392578125
        1.0038147210812713439054277841933071613311767578125
        0.9964530284430050954824764630757272243499755859375
        0.99586728412004621446840246790088713169097900390625
        1.0141777627613157708452717997715808451175689697265625
        0.99950935712776545205571210317430086433887481689453125]') atol = 1e-3
    @test bgp1.gp === gp
    @test mean(bgp1.zvals) ≈ -0.002521224029643395238287073567562401876784861087799072265625 atol = 1e-3
    @test bgp1.zvals[2000, 7] ≈ -0.305421207011104478556973162994836457073688507080078125 atol = 1e-3
    @test bgp1.Xₛ[1:2, 1:5] ≈ [-0.0277778 0.00766284 0.0431034 0.0785441 0.113985
        0.0 0.0 0.0 0.0 0.0] atol = 1e-6
    @test bgp1.Xₛⁿ[1:2, 400:407] ≈ [0.599138 0.662931 0.726724 0.790517 0.85431 0.918103 0.981897 1.04569
        0.896552 0.896552 0.896552 0.896552 0.896552 0.896552 0.896552 0.896552] atol = 1e-5
    @test bgp1.bootₓ ≈ collect(bootₓ)
    @test bgp1.bootₜ ≈ collect(bootₜ)
    @test bgp1.T === T
    @test bgp1.D === D
    @test bgp1.D′ === D′
    @test bgp1.R === R
    @test bgp1.R′ === R′
    @test bgp1.D_params == Matrix(repeat(D_params, 20)')
    @test bgp1.R_params ≈ [K K K K K K K K K K K K K K K K K K K K; 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale 0.044*t_scale]
    @test bgp1.μ ≈ μ
    @test bgp1.L ≈ L
    @test bgp1.gp_setup === gp_setup
    @test bgp1.pde_setup === pde_setup
    @test bgp1.bootstrap_setup === bootstrap_setup

    # Is density_values working correctly?
    trv, dr, rr, tt, d, r, delayCIs, diffusionCIs, reactionCIs = density_values(bgp1; level=0.05, diffusion_scales=D_params[1] .* x_scale^2 / t_scale, reaction_scales=R_params[2] / t_scale)
    @test size(trv) == (0, 20)
    @test dr ≈ bgp1.diffusionBases * D_params[1] * x_scale^2 / t_scale
    @test rr ≈ bgp1.reactionBases * R_params[2] / t_scale
    @test d == 1
    @test r == 1
    @test size(delayCIs) == (0, 2)
    @test diffusionCIs ≈ [230.846 296.066] atol = 1e-3
    @test reactionCIs ≈ [0.0435685 0.0445301] atol = 1e-6

    # Is curve_values working correctly?
    Tu_vals, Du_vals, Ru_vals, u_vals, t_vals = curve_values(bgp1; level=0.05, x_scale=x_scale, t_scale=t_scale)
    @test Tu_vals[1] == Tu_vals[2] == Tu_vals[3] == repeat([1.0], 500)
    @test unique(Du_vals[1]) ≈ [269.3956410740355522648314945399761199951171875] atol = 1e-2
    @test unique(Du_vals[2]) ≈ [230.845851655480061026537441648542881011962890625] atol = 1e-2
    @test unique(Du_vals[3]) ≈ [296.06600312482413528414326719939708709716796875] atol = 1e-2
    @test Ru_vals[1][[1, 10, 59, 100, 250, 397, 500]] ≈ vec([0.10215351577478515299191030862857587635517120361328125
        1.003518077627385540750992731773294508457183837890625
        5.5187388629667584183380313334055244922637939453125
        8.7875445201872235401197031023912131786346435546875
        16.79276363772164160081956651993095874786376953125
        18.612744410671172801130524021573364734649658203125
        16.33435581491240640161777264438569545745849609375]) atol = 1e-4
    @test Ru_vals[2][[4, 100, 19, 500, 325]] ≈ [0.400563141884128504077722254805848933756351470947265625
        8.6892916722597117740178873646073043346405029296875
        1.86147755204702747278133756481111049652099609375
        16.151722660202391779193931142799556255340576171875
        18.260075959653381261205140617676079273223876953125] atol = 1e-2
    @test Ru_vals[3][[1, 2, 55, 100, 100, 325]] ≈ [0.1032407828244026604114225165176321752369403839111328125
        0.2055741466659539995465166839494486339390277862548828125
        5.23007001341312705022801310406066477298736572265625
        8.881074415182819592473606462590396404266357421875
        8.881074415182819592473606462590396404266357421875
        18.663097009655249536308474489487707614898681640625] atol = 1e-2
    @test u_vals[[1, 3, 5, 100, 500]] ≈ [2.321621664397929496459482834325172007083892822265625
        6.9366378754184214727729340665973722934722900390625
        11.551654086438912116818755748681724071502685546875
        230.764924109912271887878887355327606201171875
        1153.76816631401061385986395180225372314453125] atol = 1e-2
    @test t_vals[[1, 2, 3, 4, 100, 250, 377]] ≈ [0.0
        0.004008016032064127924516849788005856680683791637420654296875
        0.00801603206412825584903369957601171336136758327484130859375
        0.01202404809619238464091228735242111724801361560821533203125
        0.396793587174348705293169814467546530067920684814453125
        0.99799599198396793386933723013498820364475250244140625
        1.5070140280561121759461684632697142660617828369140625]

    # Is compute_initial_conditions working correctly?
    nodes, weights = gausslegendre(5)
    tr = bgp1.delayBases
    dr = bgp1.diffusionBases
    rr = bgp1.reactionBases
    B = size(dr, 2)
    prop_samples = 1.0
    rand_pde = convert(Int64, trunc(prop_samples * B))
    N = length(bgp1.pde_setup.meshPoints)
    M = length(bgp1.pde_setup.δt)
    solns_all = zeros(N, rand_pde, M)
    ICType = "data"
    initialCondition_all = EquationLearning.compute_initial_conditions(x_pde, t_pde, u_pde, bgp1, ICType)
    @test size(initialCondition_all) == (N, B)
    @test initialCondition_all[:, 1] == initialCondition_all[:, 10] == initialCondition_all[:, 20]
    @test initialCondition_all[1:20, 5] ≈ [301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        301.84804479333087101622368209064006805419921875
        299.6011638934638767750584520399570465087890625
        295.2256589831966948622721247375011444091796875
        290.8501540729293992626480758190155029296875
        286.4746491626621036630240269005298614501953125
        282.09914425239486490681883879005908966064453125
        277.72363934212762615061365067958831787109375] atol = 1e-2
    @test initialCondition_all[[19, 59, 300, 301, 391, 500], 1] ≈ [282.09914425239486490681883879005908966064453125
        261.4782754485341911276918835937976837158203125
        26.72426511414044369985276716761291027069091796875
        25.813001275596651140631365706212818622589111328125
        30.1339349911791174463360221125185489654541015625
        366.5262850744492197918589226901531219482421875] atol = 1e-2
    @test initialCondition_all ≈ EquationLearning.compute_initial_conditions(x_pde, t_pde, u_pde, ICType, bgp1, N, B, meshPoints)
    ICType = "gp"
    initialCondition_all = EquationLearning.compute_initial_conditions(x_pde, t_pde, u_pde, bgp1, ICType)
    @test size(initialCondition_all) == (N, B)
    @test initialCondition_all[391, 4] ≈ 54.13623963141062489512478350661695003509521484375 atol = 1e-2
    @test initialCondition_all[[1, 2, 5, 15, 100, 99, 500, 399, 4], 1] ≈ vec([304.660509733794469866552390158176422119140625
        302.5328943463382529444061219692230224609375
        296.15004818396965902138617821037769317626953125
        274.87389430940771717359893955290317535400390625
        238.90677330388683685669093392789363861083984375
        239.10847806836727613699622452259063720703125
        337.153373015900797327049076557159423828125
        83.1298542579186943157765199430286884307861328125
        298.27766357142587594353244639933109283447265625]) atol = 1e-2
    @test initialCondition_all[[1, 100, 400, 499, 2, 3, 50], 7] ≈ vec([303.34555080217518252538866363465785980224609375
        232.67652427131264403215027414262294769287109375
        88.912281707003870678818202577531337738037109375
        362.65552371150710087022162042558193206787109375
        301.76756285136713131578289903700351715087890625
        300.1895749005590232627582736313343048095703125
        252.31154742255802148065413348376750946044921875]) atol = 1e-2
    @test initialCondition_all ≈ EquationLearning.compute_initial_conditions(x_pde, t_pde, u_pde, ICType, bgp1, N, B, meshPoints)

    # Is compute_valid_pde_indices working correctly?
    num_u = 500
    num_t = 500
    idx = EquationLearning.compute_valid_pde_indices(u_pde, num_t, num_u, nodes, weights, bgp1)
    u_vals = range(minimum(bgp1.gp.y), maximum(bgp1.gp.y), length=num_u)
    t_vals = collect(range(minimum(bgp1.Xₛⁿ[2, :]), maximum(bgp1.Xₛⁿ[2, :]), length=num_t))
    Tuv = zeros(num_t, 1)
    Duv = zeros(num_u, 1)
    max_u = maximum(u_pde)
    for j in idx
        Duv .= bgp1.D.(u_vals, Ref(bgp1.diffusionBases[:, j]), Ref(bgp1.D_params))
        Tuv .= bgp1.T.(t_vals, Ref(bgp1.delayBases[:, j]), Ref(bgp1.T_params))
        Reaction = u -> bgp1.R(max_u / 2 * (u + 1), bgp1.reactionBases[:, j], bgp1.R_params) # missing a max_u/2 factor in front for this new integral, but thats fine since it doesn't change the sign
        Ival = dot(weights, Reaction.(nodes))
        @test !(any(Duv .< 0) || any(Tuv .< 0) || Ival < 0)
    end
    @test idx == collect(1:20)
    @test EquationLearning.compute_valid_pde_indices(u_pde, num_t, num_u, nodes, weights, bgp1) == EquationLearning.compute_valid_pde_indices(bgp1, u_pde, num_t, num_u, bgp1.bootstrap_setup.B, bgp1.delayBases, bgp1.diffusionBases, bgp1.reactionBases, nodes, weights, bgp1.D_params, bgp1.R_params, bgp1.T_params)

    # Is boot_pde_solve working correctly?
    pde_gp1 = boot_pde_solve(bgp1, x_pde, t_pde, u_pde; ICType="gp")
    pde_data1 = boot_pde_solve(bgp1, x_pde, t_pde, u_pde; ICType="data")
    @test pde_gp1[1:4, 1:2, 1] ≈ [304.661 283.683
        302.533 282.895
        300.405 282.107
        298.278 281.319] atol = 1e-2
    @test pde_gp1[97:103, 10:13, 2] ≈ [364.326 356.213 364.092 368.716
        363.274 355.299 363.323 367.849
        362.187 354.354 362.52 366.948
        361.068 353.378 361.67 365.998
        359.912 352.367 360.783 365.014
        358.723 351.322 359.849 363.98
        357.496 350.241 358.875 362.908] atol = 1e-2
    @test pde_gp1[393:399, 17, 3:4] ≈ [238.849 388.418
        245.628 396.517
        252.435 404.767
        259.373 412.971
        266.325 421.325
        273.404 429.613
        280.482 438.05] atol = 1e-2
    @test pde_gp1[192:195, 17:20, [5, 1]] ≈ [525.701 566.008 525.92 570.77
        520.439 560.752 520.749 566.356
        515.22 555.517 515.62 561.977
        510.052 550.311 510.552 557.635;;;
        64.7322 75.9872 54.2694 74.6537
        63.1411 74.2223 52.8052 73.2691
        61.55 72.4573 51.341 71.8846
        59.959 70.6924 49.8767 70.5] atol = 1e-2
    @test pde_data1[393:399, 10:13, 1] ≈ [35.4939 35.4939 35.4939 35.4939
        39.0778 39.0778 39.0778 39.0778
        43.8411 43.8411 43.8411 43.8411
        48.6043 48.6043 48.6043 48.6043
        53.3675 53.3675 53.3675 53.3675
        58.1307 58.1307 58.1307 58.1307
        62.8939 62.8939 62.8939 62.8939] atol = 1e-3
    @test pde_data1[97:103, 10:13, 2] ≈ [357.624 359.838 358.574 358.073
        356.69 358.811 357.585 357.149
        355.599 357.848 356.584 356.096
        354.627 356.79 355.563 355.14
        353.497 355.792 354.527 354.055
        352.483 354.696 353.467 353.061
        351.308 353.657 352.39 351.936] atol = 1e-2
    @test pde_data1[393:399, 17, 3:4] ≈ [210.908 356.776
        217.975 365.303
        224.913 374.032
        232.217 382.705
        239.371 391.578
        246.894 400.376
        254.243 409.371] atol = 1e-2
    @test pde_data1[2:10, 17:20, [5, 1]] ≈ [1024.55 1021.54 1036.74 1025.15
        1024.47 1021.46 1036.59 1024.99
        1024.46 1021.46 1036.65 1025.07
        1024.34 1021.34 1036.47 1024.87
        1024.29 1021.3 1036.49 1024.9
        1024.12 1021.13 1036.27 1024.66
        1024.03 1021.05 1036.25 1024.66
        1023.81 1020.85 1035.99 1024.37
        1023.68 1020.73 1035.93 1024.33;;;
        301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848] atol = 1e-1

    # Is compute_ribbon_features working correctly?
    X = [1 2 3 4 5; 6 7 8 9 10; 11 12 13 14 15; 16 17 18 19 20]
    x_mean = [mean([1 2 3 4 5]), mean([6 7 8 9 10]), mean([11 12 13 14 15]), mean([16 17 18 19 20])]
    x_lower = [quantile([1, 2, 3, 4, 5], 0.025), quantile([6, 7, 8, 9, 10], 0.025), quantile([11, 12, 13, 14, 15], 0.025), quantile([16, 17, 18, 19, 20], 0.025)]
    x_upper = [quantile([1, 2, 3, 4, 5], 0.975), quantile([6, 7, 8, 9, 10], 0.975), quantile([11, 12, 13, 14, 15], 0.975), quantile([16, 17, 18, 19, 20], 0.975)]
    @test (x_mean, x_lower, x_upper) == EquationLearning.compute_ribbon_features(X)

    # Is pde_values working correctly?
    soln_vals_mean, soln_vals_lower, soln_vals_upper = pde_values(pde_data1, bgp1)
    for j in 1:length(bgp1.pde_setup.δt)
        @test all((soln_vals_mean[:, j], soln_vals_lower[:, j], soln_vals_upper[:, j]) .≈ EquationLearning.compute_ribbon_features(pde_data1[:, :, j]))
    end

    # Is delay_product working correctly?
    @test all(Du_vals .≈ delay_product(bgp1, 0.5; x_scale, t_scale))
    @test all(Ru_vals .≈ delay_product(bgp1, 0.5; x_scale, t_scale, type="reaction"))

    # Is error_comp working correctly?
    err_CI1 = error_comp(bgp1, pde_data1, x_pde, t_pde, u_pde)
    err_CI2 = error_comp(bgp1, pde_data1, x_pde, t_pde, u_pde; compute_mean=true)
    @test err_CI1 ≈ [2.006713037478207173336386404116638004779815673828125, 2.48294061830562684534129402891267091035842895507812] atol = 1e-2
    @test err_CI2 ≈ 2.18092705096787797813817633141297847032546997070312 atol = 1e-2

    # Is AIC working correctly?
    AICs1 = AIC(bgp1, x_pde, t_pde, u_pde; correct=false)
    AICs2 = AIC(bgp1, x_pde, t_pde, u_pde; correct=true)
    AICs3 = AIC(bgp1, x_pde, t_pde, u_pde; correct=false, pde_solns=pde_data1)
    AICs4 = AIC(bgp1, x_pde, t_pde, u_pde; correct=false, pde_solns=pde_gp1)
    AICs5 = AIC(bgp1, x_pde, t_pde, u_pde; correct=true, pde_solns=pde_data1)
    AICs6 = AIC(bgp1, x_pde, t_pde, u_pde; correct=true, pde_solns=pde_gp1)
    @test AICs1 == AICs4
    @test AICs2 == AICs6
    @test AICs2 ≈ AICs1 .+ 2 * 12 / (200 - 2)
    @test AICs3 ≈ vec([1043.90576663157708026119507849216461181640625
        1071.689652394169797844369895756244659423828125
        1148.09220445261098575429059565067291259765625
        1051.419028965671031983220018446445465087890625
        1050.6548871562799831735901534557342529296875
        1081.72739112446606668527238070964813232421875
        1133.85962082013293183990754187107086181640625
        1062.999992569771393391420133411884307861328125
        1170.218876994060337892733514308929443359375
        1084.4808091474560569622553884983062744140625
        1084.2213050270265739527530968189239501953125
        1095.40497915175592424930073320865631103515625
        1118.107725701751633096137084066867828369140625
        1206.476850084825173325953073799610137939453125
        1041.53040020125990849919617176055908203125
        1070.97679392153395383502356708049774169921875
        1121.179574759960587471141479909420013427734375
        1081.476714176071027395664714276790618896484375
        1032.036686023171569104306399822235107421875
        1067.52498005894130983506329357624053955078125]) atol = 1e-2
    @test AICs5 ≈ AICs3 .+ 2 * 12 / (200 - 2)

    # Is classify_Δᵢ working correctly? 
    @test EquationLearning.classify_Δᵢ(0.5) == 1
    @test EquationLearning.classify_Δᵢ(3.1) == 2
    @test EquationLearning.classify_Δᵢ(8.01) == 3
    @test EquationLearning.classify_Δᵢ.([0.5, 0.01, 3.01, 3.1, 7.9, 8.01, 15.0]) == [1, 1, 2, 2, 2, 3, 3]

    # Is compare_AICs working correctly?
    @test compare_AICs(12.0, 12.1, 38.0) == (1, 1, 3)
    @test compare_AICs(12.0, 12.1, 15.0, 16.0, 40.0) === (1, 1, 1, 2, 3)
    @test compare_AICs(12.0, 12.0) == (1, 1)
    AICs = [12.0 14.1 20.0; 20.7 14.3 10.0; 10.0 9.0 27.0; 19.0 7.0 13.0]
    class1 = compare_AICs(AICs[1, :]...)
    class2 = compare_AICs(AICs[2, :]...)
    class3 = compare_AICs(AICs[3, :]...)
    class4 = compare_AICs(AICs[4, :]...)
    results = [class1; class2; class3; class4]
    AIC_props = [2/4 0/4 2/4; 3/4 1/4 0/4; 1/4 2/4 1/4]
    @test AIC_props ≈ compare_AICs(AICs[:, 1], AICs[:, 2], AICs[:, 3])
    @test AIC_props ≈ compare_AICs([AICs[:, 1]; 1], AICs[:, 2], AICs[:, 3])

    # Can we fit a delay model?
    Random.seed!(5106221)
    bootstrap_setup = @set bootstrap_setup.B = 15
    bootstrap_setup = @set bootstrap_setup.show_losses = false
    bootstrap_setup = @set bootstrap_setup.Optim_Restarts = 1
    x₀ = [0.075, 0.125, 0.175, 0.225, 0.275, 0.325, 0.375, 0.425, 0.475, 0.525, 0.575, 0.625, 0.675, 0.725, 0.775, 0.825, 0.875, 0.925, 0.975, 1.025, 1.075, 1.125, 1.175, 1.225, 1.275, 1.325, 1.375, 1.425, 1.475, 1.525, 1.575, 1.625, 1.675, 1.725, 1.775, 1.825, 1.875]
    u₀ = [312.0, 261.0, 233.0, 303.0, 252.0, 252.0, 228.0, 242.0, 238.0, 191.0, 135.0, 140.0, 131.0, 79.3, 46.6, 37.3, 46.6, 46.6, 74.6, 65.3, 28.0, 37.3, 14.0, 4.66, 14.0, 0.0, 9.32, 0.0, 28.0, 97.89999999999999, 172.0, 252.0, 368.0, 350.0, 410.0, 331.0, 350.0]
    T = (t, α, p) -> 1.0 / (1.0 + exp(-α[1] * p[1] - α[2] * p[2] * t))
    D = (u, β, p) -> β[1] * p[1]
    D′ = (u, β, p) -> 0.0
    R = (u, γ, p) -> γ[1] * p[2] * u * (1.0 - u / p[1])
    R′ = (u, γ, p) -> γ[1] * p[2] - 2.0 * γ[1] * p[2] * u / p[1]
    α = [-1.50, 0.31 * t_scale]
    β = [571.0] * t_scale / x_scale^2
    γ = [0.081] * t_scale
    T_params = [1.0, 1.0]
    D_params = [1.0]
    R_params = [K, 1.0]
    x, t, u, datgp = EquationLearning.generate_data(x₀, u₀, T, D, R, D′, R′, α, β, γ, δt, finalTime; N, LHS, RHS, alg, N_thin, num_restarts, D_params, R_params, T_params)
    x_pde = copy(x)
    t_pde = copy(t)
    u_pde = copy(u)
    σ = log.([1e-6, 7std(u)])
    σₙ = log.([1e-6, 7std(u)])
    gp, μ, L = precompute_gp_mean(x, t, u, ℓₓ, ℓₜ, σ, σₙ, nugget, 250, bootstrap_setup)
    gp_setup = GP_Setup(u; ℓₓ, ℓₜ, σ, σₙ, GP_Restarts=250, μ, L, nugget, gp)
    Random.seed!(510226345431)
    T = (t, α, p) -> 1.0 / (1.0 + exp(-α[1] * p[1] - α[2] * p[2] * t))
    D = (u, β, p) -> β[1] * p[1]
    D′ = (u, β, p) -> 0.0
    R = (u, γ, p) -> γ[1] * p[2] * u * (1.0 - u / p[1])
    R′ = (u, γ, p) -> γ[1] * p[2] - 2.0 * γ[1] * p[2] * u / p[1]
    T_params = [-1.5, 0.431 * t_scale]
    D_params = [571.0 * t_scale / x_scale^2]
    R_params = [K, 0.081 * t_scale]
    α₀ = [1.0, 1.0]
    β₀ = [1.0]
    γ₀ = [1.0]
    lowers = [0.99, 0.99, 0.99, 0.99]
    uppers = [1.01, 1.01, 1.01, 1.01]
    bgp2 = bootstrap_gp(x, t, u, T, D, D′, R, R′, α₀, β₀, γ₀, lowers, uppers; gp_setup, bootstrap_setup, optim_setup, pde_setup, D_params, R_params, T_params, verbose=false)
    pde_gp2 = boot_pde_solve(bgp2, x_pde, t_pde, u_pde; ICType="gp")
    @test vec(bgp2.delayBases) ≈ vec([0.74414085431947196713764469677698798477649688720703125
        0.6183483421273916480487287117284722626209259033203125
        0.82586046001244028946786102096666581928730010986328125
        0.53951505708386360282702298718504607677459716796875
        0.78552258443071465432439026699285022914409637451171875
        0.53707212856259278765946874045766890048980712890625
        0.750639937427060477403983895783312618732452392578125
        0.620870291107207261660505537292920053005218505859375
        0.91887583079938306429568228850257582962512969970703125
        0.63995783109871473559593368918285705149173736572265625
        0.90636229283229130526677863599616102874279022216796875
        0.6381595673434699023118810146115720272064208984375
        0.96798026423016114705433210474438965320587158203125
        0.67178678725627694046096394231426529586315155029296875
        0.86048278366465724698031181105761788785457611083984375
        0.58529542706758042047709977850900031626224517822265625
        0.7758212543546820771922511994489468634128570556640625
        0.6319545705052582729166488206828944385051727294921875
        0.5662919834750670400325134323793463408946990966796875
        0.494969671337352978834900341098546050488948822021484375
        0.84633389661323421560013002817868255078792572021484375
        0.597889220157660883359085346455685794353485107421875
        0.67088908728504892398092351868399418890476226806640625
        0.48929253671111683221539578880765475332736968994140625
        0.7977029029871147702834832671214826405048370361328125
        0.6229560508389566653164592935354448854923248291015625
        0.5418268648251711727681367847253568470478057861328125
        0.5195373530714448850886810760130174458026885986328125
        1.0308185837177357146998701864504255354404449462890625
        0.68289628503232002731948568907682783901691436767578125]) atol = 1e-3
    @test vec(bgp2.diffusionBases) ≈ vec([1.049834608827629356397892479435540735721588134765625
        0.91423040476257477759958192109479568898677825927734375
        1.02901437479366553162662967224605381488800048828125
        0.9768962468275053101507410246995277702808380126953125
        0.874502842639522715018074450199492275714874267578125
        0.909450081426639744819340194226242601871490478515625
        0.8949130216239458146532115279114805161952972412109375
        0.87944184329192010007858470999053679406642913818359375
        0.90630637949039771772419271655962802469730377197265625
        0.8940076413390709575423898058943450450897216796875
        0.9352199693446452410938718458055518567562103271484375
        0.98137256002384776198965710136690177023410797119140625
        0.9684721815203387595971662449301220476627349853515625
        0.94706014120361114994040008241427130997180938720703125
        0.92847143411030275128581479293643496930599212646484375]) atol = 1e-3
    @test vec(bgp2.reactionBases) ≈ vec([1.0084863404708646061891386125353164970874786376953125
        1.016441222703702518259660791954956948757171630859375
        1.00108434419184622043985655182041227817535400390625
        0.9999985755639342333012109520495869219303131103515625
        0.99609101948097611423094122073962353169918060302734375
        0.99945228523997131642175872912048362195491790771484375
        0.99649937786628772773411810703692026436328887939453125
        1.00400715921032368527221478871069848537445068359375
        0.98498221236681804402479656346258707344532012939453125
        0.99539240299312903292872078964137472212314605712890625
        1.001416243643440839861114000086672604084014892578125
        1.0094923238668760401282042948878370225429534912109375
        0.995022136733199058511445400654338300228118896484375
        0.9998915646103139209799337550066411495208740234375
        1.002550092752744870239212104934267699718475341796875]) atol = 1e-3
    @test bgp2.gp === gp
    @test bgp2.Xₛ[1:2, [1, 2, 40, 599, 600, 900]] ≈ [-0.0277778 0.00766284 0.291188 0.964559 1.0 1.0
        0.0 0.0 0.0344828 0.655172 0.655172 1.0] atol = 1e-3
    @test bgp2.Xₛⁿ[1:2, [1, 2, 40, 599, 600, 900]] ≈ [0.025 0.0887931 0.599138 1.81121 1.875 1.875
        0.0 0.0 0.0689655 1.31034 1.31034 2.0] atol = 1e-3
    @test bgp2.Xₛⁿ ≈ bgp2.Xₛ .* [maximum(x) - minimum(x), maximum(t) - minimum(t)] .+ [minimum(x), minimum(t)] atol = 1e-3
    @test bgp2.bootₓ ≈ collect(bgp2.bootₓ) atol = 1e-3
    @test bgp2.bootₜ ≈ collect(bgp2.bootₜ) atol = 1e-3
    @test bgp2.T === T
    @test bgp2.D === D
    @test bgp2.R === R
    @test bgp2.D′ === D′
    @test bgp2.R′ === R′
    @test bgp2.D_params ≈ [0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704 0.013704] atol = 1e-4
    @test bgp2.R_params ≈ [K K K K K K K K K K K K K K K; 1.944 1.944 1.944 1.944 1.944 1.944 1.944 1.944 1.944 1.944 1.944 1.944 1.944 1.944 1.944] atol = 1e-3
    @test bgp2.T_params ≈ [-1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5 -1.5; 10.344 10.344 10.344 10.344 10.344 10.344 10.344 10.344 10.344 10.344 10.344 10.344 10.344 10.344 10.344] atol = 1e-3
    @test bgp2.μ === μ
    @test bgp2.L === L
    @test bgp2.gp_setup === gp_setup
    @test bgp2.bootstrap_setup === bootstrap_setup
    @test bgp2.pde_setup === pde_setup
    trv, dr, rr, tt, d, r, delayCIs, diffusionCIs, reactionCIs = density_values(bgp2; level=0.05, delay_scales=[T_params[1], T_params[2] / t_scale], diffusion_scales=D_params[1] * x_scale^2 / t_scale, reaction_scales=R_params[2] / t_scale)
    @test vec(trv) ≈ vec([-1.1162112814792080062176182764233089983463287353515625
        0.26650813545690577033298040987574495375156402587890625
        -1.2387906900186604897129427627078257501125335693359375
        0.23253098960314522170023110447800718247890472412109375
        -1.1782838766460719259754341692314483225345611572265625
        0.23147808741047748437580366953625343739986419677734375
        -1.1259599061405907161059758436749689280986785888671875
        0.267595095467206334216569985073874704539775848388671875
        -1.3783137461990746519546746640116907656192779541015625
        0.27582182520354603383339053834788501262664794921875
        -1.3595434392484369023890167227364145219326019287109375
        0.275046773525035537222294124148902483284473419189453125
        -1.451970396345241720581498157116584479808807373046875
        0.289540105307455331029586886870674788951873779296875
        -1.29072417549698581495931648532859981060028076171875
        0.252262329066127166665722825200646184384822845458984375
        -1.163731881532023226810679261689074337482452392578125
        0.272372419887766337165402319442364387214183807373046875
        -0.84943797521260056004877014856901951134204864501953125
        0.21333192834639913559868773518246598541736602783203125
        -1.26950084491985126788904381101019680500030517578125
        0.25769025388795185893542338817496784031391143798828125
        -1.006333630927573441482536509283818304538726806640625
        0.210885083322491340140913962386548519134521484375
        -1.19655435448067226644752736319787800312042236328125
        0.26849405791159031142711910433718003332614898681640625
        -0.81274029723775675915220517708803527057170867919921875
        0.223920599173792755909317975238081999123096466064453125
        -1.546227875576603683072107742191292345523834228515625
        0.294328298848929914566241450302186422049999237060546875]) atol = 1e-3
    @test vec(dr) ≈ vec([599.4555616405763203147216700017452239990234375
        522.02556111943022187915630638599395751953125
        587.5672080071830123415566049516201019287109375
        557.8077569385055767270387150347232818603515625
        499.34112314716747960119391791522502899169921875
        519.295996494611244997940957546234130859375
        510.99533534727305550404707901179790496826171875
        502.16129251968635571756749413907527923583984375
        517.5009426890170516344369389116764068603515625
        510.4783632046095362966298125684261322021484375
        534.010602495792454647016711533069610595703125
        560.36373177361701891641132533550262451171875
        552.99761564811342395842075347900390625
        540.7713406272620204617851413786411285400390625
        530.157188876982900183065794408321380615234375]) atol = 1e-3
    @test vec(rr) ≈ vec([0.08168739357814003287927562269032932817935943603515625
        0.0823317390389999015365418699730071239173412322998046875
        0.081087831879539551405144948148517869412899017333984375
        0.0809998846206786693446844083155156113207340240478515625
        0.0806833725779590726912005038684583269059658050537109375
        0.0809556351044376787395862038465566001832485198974609375
        0.0807164496071693104983779676331323571503162384033203125
        0.0813245798960362253904321505615371279418468475341796875
        0.079783559201712261899075429028016515076160430908203125
        0.08062678464244345255540480366107658483088016510009765625
        0.08111471573511870591932648721922305412590503692626953125
        0.0817688782332169628030982266864157281816005706787109375
        0.08059679307538912540476161439073621295392513275146484375
        0.0809912167334354282655084489306318573653697967529296875
        0.0812065575129723438152495873509906232357025146484375]) atol = 1e-3
    @test tt == 2
    @test d == 1
    @test r == 1
    @test vec(delayCIs) ≈ vec([-1.5132377578456270850182363574276678264141082763671875
        0.2117414790808590796533650291166850365698337554931640625
        -0.82558448452895205615931217835168354213237762451171875
        0.292652431109413802001739668412483297288417816162109375]) atol = 1e-3
    @test vec(diffusionCIs) ≈ vec([500.328182427549108979292213916778564453125
        595.294637868888685261481441557407379150390625]) atol = 1e-3
    @test vec(reactionCIs) ≈ vec([0.08006819105749916898329132664002827368676662445068359375
        0.08213473775697587020427903325980878435075283050537109375]) atol = 1e-3
    Tu_vals, Du_vals, Ru_vals, u_vals, t_vals = curve_values(bgp2; level=0.05, x_scale=x_scale, t_scale=t_scale)
    @test Tu_vals[1][1:10] ≈ vec([0.2334841022502253
        0.23784249679123065
        0.24225802547018063
        0.24673049317907828
        0.2512596642730799
        0.25584526170347277
        0.26048696619178724
        0.2651844154486411
        0.2699372034409313
        0.2747448797109892]) atol = 1e-1
    @test Tu_vals[2][1:10] ≈ vec([0.18055511307460306
        0.18475545986088773
        0.18903098816595704
        0.19338199724375932
        0.19780873622842626
        0.20231140203725612
        0.20689013729255187
        0.21154502826917498
        0.216276102874953
        0.2210833286713381]) atol = 1e-1
    @test Tu_vals[3][1:10] ≈ vec([0.30459222959515697
        0.3090980091366651
        0.3136403633540367
        0.3182187060392382
        0.3228324253520182
        0.32748088393591795
        0.33216341906968677
        0.33687934285458876
        0.34162794243800926
        0.34640848027369]) atol = 1e-1
    @test Du_vals[1][1:10] ≈ vec([536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125
        536.32864136865509863127954304218292236328125]) atol = 1e-1
    @test Du_vals[2][1:10] ≈ vec([500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125
        500.328182427549108979292213916778564453125]) atol = 1e-1
    @test Du_vals[3][1:10] ≈ vec([595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625
        595.294637868888685261481441557407379150390625]) atol = 1e-1
    @test Ru_vals[1][1:10] ≈ vec([0.243350969860601618055540029672556556761264801025390625
        0.479328087082880827107800314479391090571880340576171875
        0.71448842699460979321912645900738425552845001220703125
        0.9488319895957879612780061506782658398151397705078125
        1.182358774886415719862498008296824991703033447265625
        1.41506878286649229181648479425348341464996337890625
        1.64696201353601878736299113370478153228759765625
        1.878038466894995650591226876713335514068603515625
        2.108298142943420661055142772966064512729644775390625
        2.3377410416812960392007880727760493755340576171875]) atol = 1e-1
    @test Ru_vals[2][1:10] ≈ vec([0.2403783161421765013354701068237773142755031585693359375
        0.473472854941300536069093141122721135616302490234375
        0.70576059377293021146471119209309108555316925048828125
        0.9372415326370655552778998753638006746768951416015625
        1.167915671533706234441751803387887775897979736328125
        1.3977830104628525820231743637123145163059234619140625
        1.626843549424504598022167556337080895900726318359375
        1.8550972884186622824387313812621869146823883056640625
        2.0825442274453251911836559884250164031982421875
        2.309184366504493990390756152919493615627288818359375]) atol = 1e-1
    @test Ru_vals[3][1:10] ≈ vec([0.2465824405177684808254667814253480173647403717041015625
        0.4856931106102229112053692006156779825687408447265625
        0.72397615736215625847904675538302399218082427978515625
        0.961431580773568494890923830098472535610198974609375
        1.198059380844459287374093037215061485767364501953125
        1.4338595575748291910400666893110610544681549072265625
        1.668832110964677983844239861355163156986236572265625
        1.902977041014005887831217478378675878047943115234375
        2.136294347722812236867184765287674963474273681640625
        2.368784031091097919130561422207392752170562744140625]) atol = 1e-1
    @test u_vals[492:500] ≈ vec([1439.9648553014622
        1442.8914487124116
        1445.818042123361
        1448.7446355343106
        1451.67122894526
        1454.5978223562095
        1457.5244157671589
        1460.4510091781083
        1463.3776025890577]) atol = 1e-1
    @test t_vals[39:43] ≈ vec([0.1523046092184369
        0.156312625250501
        0.16032064128256512
        0.16432865731462926
        0.1683366733466934]) atol = 1e-1
    Du_vals = delay_product(bgp2, 0.5; x_scale, t_scale)
    @test Du_vals[1][1:10] ≈ vec([463.6130610175516
        463.6130610175516
        463.6130610175516
        463.6130610175516
        463.6130610175516
        463.6130610175516
        463.6130610175516
        463.6130610175516
        463.6130610175516
        463.6130610175516]) atol = 1e-1
    @test Du_vals[2][1:10] ≈ vec([428.2807441184782
        428.2807441184782
        428.2807441184782
        428.2807441184782
        428.2807441184782
        428.2807441184782
        428.2807441184782
        428.2807441184782
        428.2807441184782
        428.2807441184782]) atol = 1e-1
    @test Du_vals[3][1:10] ≈ vec([520.096716090358
        520.096716090358
        520.096716090358
        520.096716090358
        520.096716090358
        520.096716090358
        520.096716090358
        520.096716090358
        520.096716090358
        520.096716090358]) atol = 1e-1
    Ru_vals = delay_product(bgp2, 0.5; x_scale, t_scale, type="reaction")
    @test Ru_vals[1][39:48] ≈ vec([7.464926608887905
        7.642069740428939
        7.818506876129778
        7.994238015990422
        8.169263160010875
        8.343582308191131
        8.517195460531195
        8.690102617031066
        8.862303777690743
        9.03379894251022]) atol = 1e-1
    @test Ru_vals[2][79:88] ≈ vec([13.4388611407641
        13.581796447996014
        13.724054055447443
        13.865633963118391
        14.006536171008852
        14.146760679118835
        14.286307487448333
        14.425176595997346
        14.563368004765879
        14.700881713753926]) atol = 1e-1
    @test Ru_vals[3][191:200] ≈ vec([27.17482229897456
        27.24700797666704
        27.318463860561167
        27.389189950656935
        27.459186246954346
        27.52845274945341
        27.596989458154116
        27.664796373056465
        27.731873494160457
        27.798220821466092]) atol = 1e-1
    Random.seed!(29991)
    res = compare_AICs(x_pde, t_pde, u_pde, bgp1, bgp2)
    @test res ≈ [0.0 0.0 1.0; 1.0 0.0 0.0]
    @test vec(pde_gp2[[1:10..., 73, 101], [1, 2, 4, 5, 10, 11, 13, 15], [1, 2, 3, 4, 5]]) ≈ [
        333.8728799467543240098166279494762420654296875,
        331.8231061655338862692588008940219879150390625,
        329.7733323843134485287009738385677337646484375,
        327.723558603093124474980868399143218994140625,
        325.67378482187268673442304134368896484375,
        323.62401104065230583728407509624958038330078125,
        321.5742372594319249401451088488101959228515625,
        319.5244634782114871995872817933559417724609375,
        317.4746896969910494590294547379016876220703125,
        315.4249159157707254053093492984771728515625,
        257.9062958962382481331587769091129302978515625,
        246.24983967995694911223836243152618408203125,
        350.70944877603915301733650267124176025390625,
        349.020053367445143521763384342193603515625,
        347.33065795885119086960912682116031646728515625,
        345.6412625502572382174548693001270294189453125,
        343.9518671416632287218817509710788726806640625,
        342.26247173306927606972749345004558563232421875,
        340.57307632447526657415437512099742889404296875,
        338.883680915881313922000117599964141845703125,
        337.194285507287304426426999270915985107421875,
        335.50489009869335177427274174988269805908203125,
        248.524325387332424952546716667711734771728515625,
        225.499652224924631127578322775661945343017578125,
        335.68728005792303292764700017869472503662109375,
        334.07858636046557876397855579853057861328125,
        332.4698926630081814437289722263813018798828125,
        330.861198965550784123479388654232025146484375,
        329.2525052680933868032298050820827484130859375,
        327.6438115706359894829802215099334716796875,
        326.0351178731785921627306379377841949462890625,
        324.426424175721194842481054365634918212890625,
        322.8177304782637975222314707934856414794921875,
        321.20903678080640020198188722133636474609375,
        258.35944601614920657084439881145954132080078125,
        228.0903800739300777422613464295864105224609375,
        307.23546473832772107925848104059696197509765625,
        306.23083473412219746023765765130519866943359375,
        305.22620472991667384121683426201343536376953125,
        304.22157472571115022219601087272167205810546875,
        303.21694472150562660317518748342990875244140625,
        302.21231471730010298415436409413814544677734375,
        301.20768471309457936513354070484638214111328125,
        300.20305470888905574611271731555461883544921875,
        299.19842470468353212709189392626285552978515625,
        298.1937947004780653514899313449859619140625,
        258.8156558330905454567982815206050872802734375,
        233.91216655173656135957571677863597869873046875,
        303.40421647521981185491313226521015167236328125,
        302.4471370544459887241828255355358123779296875,
        301.4900576336722224368713796138763427734375,
        300.53297821289839930614107288420200347900390625,
        299.5758987921245761754107661545276641845703125,
        298.618819371350809888099320232868194580078125,
        297.66173995057698675736901350319385528564453125,
        296.70466052980322047005756758153438568115234375,
        295.74758110902939733932726085186004638671875,
        294.7905016882556310520158149302005767822265625,
        270.5330026216230407953844405710697174072265625,
        247.16552094050808818792575038969516754150390625,
        394.39084364099136337244999594986438751220703125,
        389.8049828541528540881699882447719573974609375,
        385.21912206731440164730884134769439697265625,
        380.6332612804759492064476944506168365478515625,
        376.04740049363743992216768674552440643310546875,
        371.4615397067990443247254006564617156982421875,
        366.87567891996053504044539295136928558349609375,
        362.2898181331221394430031068623065948486328125,
        357.70395734628363015872309915721416473388671875,
        353.118096559445120874443091452121734619140625,
        257.5349414691909260000102221965789794921875,
        243.7883135697474017433705739676952362060546875,
        320.14259890000585073721595108509063720703125,
        318.47611099562845993204973638057708740234375,
        316.80962309125112597030238248407840728759765625,
        315.1431351868737920085550285875797271728515625,
        313.47664728249645804680767469108104705810546875,
        311.810159378119124085060320794582366943359375,
        310.143671473741733279894106090068817138671875,
        308.4771835693644561615656130015850067138671875,
        306.8106956649870653563993982970714569091796875,
        305.14420776060973139465204440057277679443359375,
        271.56768102120821595235611312091350555419921875,
        249.94970207521970451125525869429111480712890625,
        377.138320015431645515491254627704620361328125,
        373.9770989535562648597988300025463104248046875,
        370.81587789168088420410640537738800048828125,
        367.65465682980556039183284156024456024169921875,
        364.49343576793017973614041693508625030517578125,
        361.33221470605485592386685311794281005859375,
        358.17099364417941842475556768476963043212890625,
        355.009772582304094612482003867626190185546875,
        351.8485515204287139567895792424678802490234375,
        348.6873304585533333010971546173095703125,
        255.352080895520970216239220462739467620849609375,
        227.8763448495436705343308858573436737060546875,
        472.0657050839100747907650656998157501220703125,
        472.22503504930165263431263156235218048095703125,
        471.9600339908321302573313005268573760986328125,
        472.0133142974572137973154895007610321044921875,
        471.64420985739792513413704000413417816162109375,
        471.5922522264514782364130951464176177978515625,
        471.1217743122366528041311539709568023681640625,
        470.96655613748356472569867037236690521240234375,
        470.398544826385887063224799931049346923828125,
        470.1431596393327936311834491789340972900390625,
        412.83039804330252309227944351732730865478515625,
        382.75572841254455624948604963719844818115234375,
        481.640256687807777780108153820037841796875,
        481.675896860288730749743990600109100341796875,
        481.4910731441923417150974273681640625,
        481.3775406806986438823514617979526519775390625,
        481.0449551749492229646421037614345550537109375,
        480.78369044523509501232183538377285003662109375,
        480.30616780774397511777351610362529754638671875,
        479.90000467988164700727793388068675994873046875,
        479.28171082464905339293181896209716796875,
        478.73480937640960064527462236583232879638671875,
        385.49601995310473512290627695620059967041015625,
        346.10425662927673329249955713748931884765625,
        482.9193593226408438567887060344219207763671875,
        482.749029093745093632605858147144317626953125,
        482.81786638504519260095548816025257110595703125,
        482.54683585928199818226858042180538177490234375,
        482.5143058891632108498015441000461578369140625,
        482.14427384674064569480833597481250762939453125,
        482.01141064750964915219810791313648223876953125,
        481.544948016337002627551555633544921875,
        481.31366232659928527937154285609722137451171875,
        480.7541574602638547730748541653156280517578125,
        408.8975551865156603525974787771701812744140625,
        361.95062382310680959562887437641620635986328125,
        445.5427412258355843732715584337711334228515625,
        445.58414693163962283506407402455806732177734375,
        445.47475196116619144959258846938610076904296875,
        445.4480866670156729014706797897815704345703125,
        445.27151511247933513004682026803493499755859375,
        445.17742608872094933758489787578582763671875,
        444.93520135521629299546475522220134735107421875,
        444.77504093667351980911917053163051605224609375,
        444.46935557075931910731014795601367950439453125,
        444.2451363191876225755549967288970947265625,
        396.2155745654509928499464876949787139892578125,
        358.64774434760244048447930254042148590087890625,
        454.23998254300289545426494441926479339599609375,
        454.34380539466582149543683044612407684326171875,
        454.194756795033072194200940430164337158203125,
        454.25302147650774031717446632683277130126953125,
        454.05964474188391477582626976072788238525390625,
        454.07258529945119107651407830417156219482421875,
        453.8363235050431967465556226670742034912109375,
        453.8047233507653572814888320863246917724609375,
        453.52752753742566937944502569735050201416015625,
        453.45268478260680922176106832921504974365234375,
        420.775477794362132044625468552112579345703125,
        384.39279769640279482700861990451812744140625,
        493.478585220260129062808118760585784912109375,
        493.35651171374178147743805311620235443115234375,
        493.25848205298444781874422915279865264892578125,
        492.917420227676984723075293004512786865234375,
        492.60143292229759026668034493923187255859375,
        492.04573223928690595130319707095623016357421875,
        491.51713232498940442383172921836376190185546875,
        490.75426539859694230472086928784847259521484375,
        490.0214523122898526708013378083705902099609375,
        489.0618218999276223257766105234622955322265625,
        398.59283011723863410225021652877330780029296875,
        368.631424993065365924849174916744232177734375,
        459.55099077691630782283027656376361846923828125,
        459.41137433337252105047809891402721405029296875,
        459.480325414171829834231175482273101806640625,
        459.27077193247595232605817727744579315185546875,
        459.26930750430864236477646045386791229248046875,
        458.99151070193556734011508524417877197265625,
        458.9208437957516935057356022298336029052734375,
        458.57742258225749765188083983957767486572265625,
        458.4396872706400927199865691363811492919921875,
        458.034119510981327039189636707305908203125,
        418.83752986285117003717459738254547119140625,
        383.0545596818261628868640400469303131103515625,
        491.959036146702828773413784801959991455078125,
        492.05546485850169347031624056398868560791015625,
        491.77525706131581273439223878085613250732421875,
        491.6878492480299200906301848590373992919921875,
        491.226246763198332700994797050952911376953125,
        490.95726503187887601598049513995647430419921875,
        490.31892376633146568565280176699161529541015625,
        489.87288191713076912492397241294384002685546875,
        489.0646135225789521427941508591175079345703125,
        488.44814860672380518735735677182674407958984375,
        391.40269664028625129503780044615268707275390625,
        347.091607544134376439615152776241302490234375,
        824.4033418008933722376241348683834075927734375,
        824.6873136516015847519156523048877716064453125,
        824.3437899546012204154976643621921539306640625,
        824.5678212041669894460937939584255218505859375,
        824.1653164140598164522089064121246337890625,
        824.3292016259191541394102387130260467529296875,
        823.868464590347457487951032817363739013671875,
        823.9721803747955846120021305978298187255859375,
        823.45413158970814038184471428394317626953125,
        823.4978327679403946603997610509395599365234375,
        760.9992285734614370085182599723339080810546875,
        704.1437910268714404082857072353363037109375,
        820.4906616168491382268257439136505126953125,
        820.2307563880245879772701300680637359619140625,
        820.389325254691129885031841695308685302734375,
        820.0286061439061313649290241301059722900390625,
        820.0856686672785826885956339538097381591796875,
        819.625007304713335543056018650531768798828125,
        819.580745933121079360716976225376129150390625,
        819.021356366793270353809930384159088134765625,
        818.876302495169284156872890889644622802734375,
        818.2197311518046944911475293338298797607421875,
        722.524845884562409992213360965251922607421875,
        657.648825054836152048665098845958709716796875,
        834.201864280986910671344958245754241943359375,
        834.3175891943068336331634782254695892333984375,
        834.1278450945120539472554810345172882080078125,
        834.169374927974786260165274143218994140625,
        833.905934770614067019778303802013397216796875,
        833.8732414524896512375562451779842376708984375,
        833.53657319041531081893481314182281494140625,
        833.4297752290584639922599308192729949951171875,
        833.020487431055926208500750362873077392578125,
        832.8398468702147283693193458020687103271484375,
        750.8199089830967523084837011992931365966796875,
        680.8251634532306297842296771705150604248046875,
        792.1559120675110534648410975933074951171875,
        791.906593179541459903703071177005767822265625,
        792.1031555890591562274494208395481109619140625,
        791.8015149872823030818835832178592681884765625,
        791.94498355318637550226412713527679443359375,
        791.591550773354583725449629127979278564453125,
        791.6816864525832215804257430136203765869140625,
        791.277081495297125002252869307994842529296875,
        791.3137427856657950542285107076168060302734375,
        790.858670189433041741722263395786285400390625,
        730.266296286099759527132846415042877197265625,
        672.35861111584517857409082353115081787109375,
        799.3924517645363039264339022338390350341796875,
        799.45622232839696152950637042522430419921875,
        799.3574156949558755513862706720829010009765625,
        799.3860375223131313759949989616870880126953125,
        799.252326790771576270344667136669158935546875,
        799.2457067798826528814970515668392181396484375,
        799.07724164421733803465031087398529052734375,
        799.0353051993612325532012619078159332275390625,
        798.8322501980686638489714823663234710693359375,
        798.75493887937182080349884927272796630859375,
        751.546964374007302467362023890018463134765625,
        695.968743026566926346276886761188507080078125,
        829.417556643892339707235805690288543701171875,
        829.4492339965048586236662231385707855224609375,
        829.315855432253329126979224383831024169921875,
        829.2458629190074361758888699114322662353515625,
        829.0112722832883491719258017838001251220703125,
        828.840160606589734015869908034801483154296875,
        828.5053619525482417884632013738155364990234375,
        828.234193359152641278342343866825103759765625,
        827.800693457951865639188326895236968994140625,
        827.4310273624751062016002833843231201171875,
        741.0713112166882865494699217379093170166015625,
        682.9160669917365567016531713306903839111328125,
        810.47239643828334010322578251361846923828125,
        810.806153184598542793537490069866180419921875,
        810.429639407305103304679505527019500732421875,
        810.7201328519043954656808637082576751708984375,
        810.301441931778526850393973290920257568359375,
        810.5482414080007629308965988457202911376953125,
        810.088022887187662490759976208209991455078125,
        810.290773330790898398845456540584564208984375,
        809.7897405127558840831625275313854217529296875,
        809.9481604963148129172623157501220703125,
        757.277144493042214890010654926300048828125,
        699.525760821832591318525373935699462890625,
        835.1032461829736348590813577175140380859375,
        835.517467975284262138302437961101531982421875,
        834.998720296151077491231262683868408203125,
        835.3077311375367344226106069982051849365234375,
        834.6855254190360255961422808468341827392578125,
        834.8890262521052818556199781596660614013671875,
        834.164805366526707075536251068115234375,
        834.2628818018584979654406197369098663330078125,
        833.4384514463262121353182010352611541748046875,
        833.431567901857533797738142311573028564453125,
        733.2027732955770034095621667802333831787109375,
        661.2047924720014862032257951796054840087890625,
        1203.56123160628567347885109484195709228515625,
        1203.9813726193560796673409640789031982421875,
        1203.519826667802817610208876430988311767578125,
        1203.898141105841432363376952707767486572265625,
        1203.39561279681447558687068521976470947265625,
        1203.731681099540992363472469151020050048828125,
        1203.1885923987420028424821794033050537109375,
        1203.481997780815845544566400349140167236328125,
        1202.898768060616930597461760044097900390625,
        1203.14909677660398301668465137481689453125,
        1148.008092909550441618193872272968292236328125,
        1088.891599750771320032072253525257110595703125,
        1196.895693264164719948894344270229339599609375,
        1197.28854752732650013058446347713470458984375,
        1196.830922932857674823026172816753387451171875,
        1197.158524621748028948786668479442596435546875,
        1196.636694533562831566086970269680023193359375,
        1196.898645736318940180353820323944091796875,
        1196.31325514070204008021391928195953369140625,
        1196.50924329199779094778932631015777587890625,
        1195.86101418547377761569805443286895751953125,
        1195.990812354853915167041122913360595703125,
        1120.912962695587566486210562288761138916015625,
        1055.946074490749879259965382516384124755859375,
        1206.4575475033270777203142642974853515625,
        1206.7411051295102879521436989307403564453125,
        1206.403569859626941251917742192745208740234375,
        1206.63283045706293705734424293041229248046875,
        1206.2416476445005173445679247379302978515625,
        1206.416303532098254436277784407138824462890625,
        1205.97181272446914590545929968357086181640625,
        1206.09156862647387242759577929973602294921875,
        1205.594117275477628936641849577426910400390625,
        1205.658690734229139707167632877826690673828125,
        1136.683701504341797772212885320186614990234375,
        1069.585036127951070739072747528553009033203125,
        1174.436419692828849292709492146968841552734375,
        1174.7026278823295797337777912616729736328125,
        1174.394616809783883581985719501972198486328125,
        1174.618703683304147489252500236034393310546875,
        1174.269202724699198370217345654964447021484375,
        1174.4508454341093965922482311725616455078125,
        1174.060160850334568749531172215938568115234375,
        1174.199032868198628420941531658172607421875,
        1173.767462613605175647535361349582672119140625,
        1173.863234182386577231227420270442962646484375,
        1118.24317348212889555725269019603729248046875,
        1060.199058490240304308827035129070281982421875,
        1182.1107077635433597606606781482696533203125,
        1181.75277246422729149344377219676971435546875,
        1182.078577771155551090487278997898101806640625,
        1181.68887681851310844649560749530792236328125,
        1181.982146460358990225358866155147552490234375,
        1181.561001641130815187352709472179412841796875,
        1181.821289687524995315470732748508453369140625,
        1181.36897888162593517336063086986541748046875,
        1181.595800073735290425247512757778167724609375,
        1181.1125557737041162909008562564849853515625,
        1134.164085747715944307856261730194091796875,
        1078.099397260304840528988279402256011962890625,
        1200.923765480602696698042564094066619873046875,
        1200.62544692075471175485290586948394775390625,
        1200.865244162267117644660174846649169921875,
        1200.508755647180578307597897946834564208984375,
        1200.689772178724524565041065216064453125,
        1200.275555583761388334096409380435943603515625,
        1200.39762437929630323196761310100555419921875,
        1199.926209578488851548172533512115478515625,
        1199.989255307062876454438082873821258544921875,
        1199.461256626778549616574309766292572021484375,
        1132.860752544986326029174961149692535400390625,
        1072.6855102735235050204209983348846435546875,
        1190.803603425919163782964460551738739013671875,
        1190.632636801004991866648197174072265625,
        1190.767904266676623592502437531948089599609375,
        1190.561395323098849985399283468723297119140625,
        1190.660775682624944238341413438320159912109375,
        1190.41884960350262190331704914569854736328125,
        1190.482124128079931324464268982410430908203125,
        1190.2048736646465840749442577362060546875,
        1190.231792941615140080102719366550445556640625,
        1189.9192774226239635027013719081878662109375,
        1139.257107168618176729069091379642486572265625,
        1080.790926168843043342349119484424591064453125,
        1204.628942609188698042999021708965301513671875,
        1205.422049347134816343896090984344482421875,
        1204.562338688053159785340540111064910888671875,
        1205.2878902767042745836079120635986328125,
        1204.36259555140213706181384623050689697265625,
        1205.0197128066402001422829926013946533203125,
        1204.029918368076323531568050384521484375,
        1204.61779683378335903398692607879638671875,
        1203.564646721826420616707764565944671630859375,
        1204.0825586059263514471240341663360595703125,
        1124.48248394862957866280339658260345458984375,
        1053.64641078207523605669848620891571044921875,
        1466.14160987708191896672360599040985107421875,
        1465.839976736146354596712626516819000244140625,
        1466.116460876883365926914848387241363525390625,
        1465.789901294754372429451905190944671630859375,
        1466.040991459663246132549829781055450439453125,
        1465.689705051997634654981084167957305908203125,
        1465.91513430477834845078177750110626220703125,
        1465.53929714842388420947827398777008056640625,
        1465.73877697600573810632340610027313232421875,
        1465.338540947561341454274952411651611328125,
        1430.081585324118123025982640683650970458984375,
        1389.754616713481254919315688312053680419921875,
        1462.226009570831820383318699896335601806640625,
        1461.893930805343416068353690207004547119140625,
        1462.191968379257332344423048198223114013671875,
        1461.826154636224373462027870118618011474609375,
        1462.089851382152801306801848113536834716796875,
        1461.690614546217830138630233705043792724609375,
        1461.919678158378928856109268963336944580078125,
        1461.4873347283055409207008779048919677734375,
        1461.681480827097175279050134122371673583984375,
        1461.216350715382077396498061716556549072265625,
        1418.240124598096599584096111357212066650390625,
        1375.697324917438209013198502361774444580078125,
        1464.8722818212872880394570529460906982421875,
        1464.639934770593754365108907222747802734375,
        1464.8409920229014460346661508083343505859375,
        1464.57754346606407125364057719707489013671875,
        1464.747109160924082971177995204925537109375,
        1464.452733426974873509607277810573577880859375,
        1464.59059278832091877120546996593475341796875,
        1464.265449702273826915188692510128021240234375,
        1464.37137533864051874843426048755645751953125,
        1464.015609638978276052512228488922119140625,
        1422.225744859861833901959471404552459716796875,
        1378.510687746629400862730108201503753662109375,
        1447.7509882860831567086279392242431640625,
        1447.629501450767065762192942202091217041015625,
        1447.72519944190071328193880617618560791015625,
        1447.578021619747005388489924371242523193359375,
        1447.647814079315821800264529883861541748046875,
        1447.475024017173154788906686007976531982421875,
        1447.518775659076936790370382368564605712890625,
        1447.320432665010002892813645303249359130859375,
        1447.337989785950412624515593051910400390625,
        1447.114133355066542208078317344188690185546875,
        1411.479919069947982279700227081775665283203125,
        1372.382993568668325679027475416660308837890625,
        1452.8015904051453617285005748271942138671875,
        1452.6156689320459918235428631305694580078125,
        1452.77978907077840631245635449886322021484375,
        1452.572210009286436616093851625919342041015625,
        1452.71435329948189973947592079639434814453125,
        1452.48522825962709248415194451808929443359375,
        1452.6051877752497603069059550762176513671875,
        1452.354595853430737406597472727298736572265625,
        1452.452133600440220106975175440311431884765625,
        1452.18012099372890588711015880107879638671875,
        1420.09037429693989906809292733669281005859375,
        1381.97538398045662688673473894596099853515625,
        1462.02363390481104943319223821163177490234375,
        1461.751216464487470148014836013317108154296875,
        1461.993031353521246273885481059551239013671875,
        1461.690247085977034657844342291355133056640625,
        1461.901226838042248346027918159961700439453125,
        1461.568313930160684321890585124492645263671875,
        1461.7482295942963901325128972530364990234375,
        1461.385427844290234133950434625148773193359375,
        1461.534054419618087194976396858692169189453125,
        1461.141604214569952091551385819911956787109375,
        1421.9232499306735917343758046627044677734375,
        1381.92150902795810907264240086078643798828125,
        1457.11680039205430148285813629627227783203125,
        1456.774485003922336545656435191631317138671875,
        1457.093198667068236318300478160381317138671875,
        1456.7275436762984099914319813251495361328125,
        1457.02236387340917644905857741832733154296875,
        1456.6336011591993155889213085174560546875,
        1456.9042071317371664918027818202972412109375,
        1456.492537684826174881891347467899322509765625,
        1456.738580232909953338094055652618408203125,
        1456.304173492290146896266378462314605712890625,
        1422.312344826832259059301577508449554443359375,
        1382.526889754570902368868701159954071044921875,
        1463.51416176078646458336152136325836181640625,
        1463.26516682915143974241800606250762939453125,
        1463.47813332065516078728251159191131591796875,
        1463.193332504045201858389191329479217529296875,
        1463.3700480808593056281097233295440673828125,
        1463.049663360947988621774129569530487060546875,
        1463.18990615982920644455589354038238525390625,
        1462.834158170629734740941785275936126708984375,
        1462.937707344867021674872376024723052978515625,
        1462.546814482804393264814279973506927490234375,
        1416.23032831309456014423631131649017333984375,
        1369.939418585179737419821321964263916015625
    ] atol = 1e-1

    # Can we fit models with the basis function approach?
    Random.seed!(51021)
    x₀ = [0.075, 0.125, 0.175, 0.225, 0.275, 0.325, 0.375, 0.425, 0.475, 0.525, 0.575, 0.625, 0.675, 0.725, 0.775, 0.825, 0.875, 0.925, 0.975, 1.025, 1.075, 1.125, 1.175, 1.225, 1.275, 1.325, 1.375, 1.425, 1.475, 1.525, 1.575, 1.625, 1.675, 1.725, 1.775, 1.825, 1.875]
    u₀ = [312.0, 261.0, 233.0, 303.0, 252.0, 252.0, 228.0, 242.0, 238.0, 191.0, 135.0, 140.0, 131.0, 79.3, 46.6, 37.3, 46.6, 46.6, 74.6, 65.3, 28.0, 37.3, 14.0, 4.66, 14.0, 0.0, 9.32, 0.0, 28.0, 97.89999999999999, 172.0, 252.0, 368.0, 350.0, 410.0, 331.0, 350.0]
    T = (t, α, p) -> 1.0
    D = (u, β, p) -> β[1] * p[1]
    D′ = (u, β, p) -> 0.0
    R = (u, γ, p) -> γ[1] * p[2] * u * (1.0 - u / p[1])
    R′ = (u, γ, p) -> γ[1] * p[2] - 2.0 * γ[1] * p[2] * u / p[1]
    α = Vector{Float64}([])
    β = [301.0] * t_scale / x_scale^2
    γ = [0.044] * t_scale
    T_params = Vector{Float64}([])
    D_params = [1.0]
    R_params = [K, 1.0]
    x, t, u, datgp = EquationLearning.generate_data(x₀, u₀, T, D, R, D′, R′, α, β, γ, δt, finalTime; N, LHS, RHS, alg, N_thin, num_restarts, D_params, R_params, T_params)
    x_pde = copy(x)
    t_pde = copy(t)
    u_pde = copy(u)
    σ = log.([1e-6, 7std(u)])
    σₙ = log.([1e-6, 7std(u)])
    gp, μ, L = precompute_gp_mean(x, t, u, ℓₓ, ℓₜ, σ, σₙ, nugget, 250, bootstrap_setup)
    gp_setup = GP_Setup(u; ℓₓ, ℓₜ, σ, σₙ, GP_Restarts=250, μ, L, nugget, gp)
    D = convert(Vector{Function}, [(u, p) -> 1.0])
    D′ = convert(Vector{Function}, [(u, p) -> 0.0])
    R = convert(Vector{Function}, [(u, p) -> u * (1.0 - u / p[1])])
    R′ = convert(Vector{Function}, [(u, p) -> 1.0 - 2u / p[1]])
    D_params = Vector{Float64}([])
    R_params = [K]
    bootstrap_setup = @set bootstrap_setup.B = 15
    Random.seed!(510212323)
    bgp3 = basis_bootstrap_gp(x, t, u, D, D′, R, R′; gp_setup, bootstrap_setup, pde_setup, D_params, R_params, verbose=false)
    @test bgp3.pde_setup === pde_setup
    pde_setup = @set pde_setup.alg = CVODE_BDF(linear_solver=:Band, jac_upper=1, jac_lower=1)
    pde_data3 = boot_pde_solve(bgp3, x_pde, t_pde, u_pde; ICType="data")
    pde_gp3 = boot_pde_solve(bgp3, x_pde, t_pde, u_pde; ICType="gp")
    @test bgp3.diffusionBases ≈ [0.00605992 0.00634079 0.00523824 0.00674552 0.00575088 0.00757705 0.00625447 0.00617705 0.00657531 0.00679501 0.0062141 0.00596063 0.00683456 0.0064146 0.00699783] atol = 1e-3
    @test bgp3.reactionBases ≈ [1.07008 1.047 1.03705 1.06346 1.04723 1.06998 1.05673 1.05721 1.07045 1.07127 1.04543 1.04791 1.05537 1.04437 1.07207] atol = 1e-3
    @test bgp3.gp === gp
    @test bgp3.Xₛ[1:2, [1, 2, 40, 599, 600, 900]] ≈ [-0.0277778 0.00766284 0.291188 0.964559 1.0 1.0
        0.0 0.0 0.0344828 0.655172 0.655172 1.0] atol = 1e-3
    @test bgp3.Xₛⁿ[1:2, [1, 2, 40, 599, 600, 900]] ≈ [0.025 0.0887931 0.599138 1.81121 1.875 1.875
        0.0 0.0 0.0689655 1.31034 1.31034 2.0] atol = 1e-3
    @test bgp3.Xₛⁿ ≈ bgp3.Xₛ .* [maximum(x) - minimum(x), maximum(t) - minimum(t)] .+ [minimum(x), minimum(t)] atol = 1e-3
    @test bgp3.bootₓ ≈ collect(bgp2.bootₓ) atol = 1e-3
    @test bgp3.bootₜ ≈ collect(bgp2.bootₜ) atol = 1e-3
    @test bgp3.D === D
    @test bgp3.R === R
    @test bgp3.D′ == D′
    @test bgp3.R′ === R′
    @test bgp3.D_params === D_params
    @test bgp3.R_params === R_params
    @test bgp3.μ === μ
    @test bgp3.L === L
    @test bgp3.gp_setup === gp_setup
    @test bgp3.bootstrap_setup === bootstrap_setup
    @test pde_data3[[1, 5, 10, 100], [1, 2, 3, 4, 10], [1, 2, 3, 4, 5]] ≈ [
        301.848 301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848 301.848
        301.848 301.848 301.848 301.848 301.848
        228.767 228.767 228.767 228.767 228.767;;;
        436.446 432.01 433.484 433.708 434.846
        435.854 431.449 432.802 433.183 434.324
        433.589 429.247 430.192 431.03 432.197
        359.531 356.114 355.278 358.181 359.248;;;
        617.556 607.771 607.131 613.015 616.009
        617.233 607.466 606.752 612.729 615.725
        615.9 606.103 605.372 611.661 614.547
        527.084 518.093 517.106 523.034 525.76;;;
        831.237 815.692 812.888 824.636 829.466
        831.001 815.465 812.621 824.42 829.251
        829.738 814.198 811.418 823.837 828.673
        729.315 713.927 712.057 722.557 727.222;;;
        1048.92 1029.51 1025.18 1041.45 1047.53
        1048.74 1029.33 1024.97 1041.28 1047.36
        1047.89 1028.22 1023.8 1040.36 1046.55
        946.468 925.83 923.018 937.662 943.942
    ] atol = 1e-1
    @test pde_gp3[[1, 2, 3, 10, 100, 291, 305], [1, 2, 3, 4, 5, 6, 15], [1, 2, 3, 4, 5]] ≈ [
        259.474 301.274 319.403 282.131 333.993 262.262 255.855
        260.014 299.743 317.378 281.612 330.925 262.497 255.708
        260.555 298.211 315.352 281.093 327.858 262.732 255.56
        264.337 287.492 301.175 277.463 306.387 264.376 254.526
        236.779 239.687 239.236 243.366 246.383 248.94 245.786
        54.6224 44.6437 62.05 49.0552 54.6307 49.7532 55.8508
        38.6481 29.8679 50.305 32.143 37.9126 35.2467 46.1549;;;
        407.036 424.076 438.212 418.457 441.018 409.032 394.093
        407.1 423.962 437.461 418.45 440.809 409.018 393.99
        407.03 423.993 438.055 418.416 440.843 409.044 394.102
        406.969 422.361 434.452 417.657 437.429 409.239 394.173
        361.041 360.891 359.138 368.213 366.836 375.444 370.041
        79.6066 64.5904 89.4394 70.5238 78.1774 68.6346 79.2005
        60.1417 46.8109 74.7066 51.2627 57.7675 52.7466 67.1858;;;
        592.539 602.548 612.68 602.404 616.26 597.628 579.568
        592.882 602.736 612.556 602.448 616.772 597.57 579.56
        592.52 602.495 612.575 602.372 616.161 597.627 579.573
        592.491 601.685 610.509 601.804 614.803 597.549 579.666
        527.737 522.861 519.285 534.665 527.84 542.619 535.229
        121.929 100.129 132.727 108.992 117.926 104.126 119.173
        97.577 77.7744 113.694 85.6514 92.3242 85.449 104.328;;;
        809.39 811.868 817.098 817.236 824.382 816.304 797.879
        809.218 812.356 818.229 816.936 823.585 816.317 797.991
        809.366 811.825 817.021 817.205 824.313 816.294 797.876
        808.739 811.492 816.68 816.334 822.233 816.1 797.932
        729.677 719.579 713.937 735.48 723.502 743.025 734.541
        190.802 159.973 200.067 173.992 181.685 165.938 186.342
        160.929 132.396 176.48 146.204 149.508 144.397 169.548;;;
        1031.03 1027.34 1028.95 1036.38 1037.35 1038.42 1022.41
        1031.14 1027.19 1028.64 1036.27 1036.97 1038.53 1022.37
        1031.0 1027.3 1028.89 1036.35 1037.3 1038.4 1022.4
        1030.64 1026.46 1027.48 1035.7 1035.97 1038.18 1022.16
        946.514 931.99 924.618 950.464 935.035 956.621 948.238
        299.047 256.956 302.07 279.201 280.383 268.761 295.034
        264.807 225.195 274.75 248.371 241.942 245.878 278.33
    ] atol = 1e-1
    idx = EquationLearning.compute_valid_pde_indices(u_pde, 500, nodes, weights, bgp3)
    @test idx == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    dr, rr, d, r, diffusionCIs, reactionCIs = density_values(bgp3; level=0.05, diffusion_scales=x_scale^2 / t_scale, reaction_scales=1 / t_scale)
    @test dr ≈ [252.497 264.199 218.26 281.063 239.62 315.711 260.603 257.377 273.971 283.125 258.921 248.359 284.773 267.275 291.576] atol = 1e-1
    @test rr ≈ [0.0445867 0.0436251 0.0432105 0.0443109 0.0436347 0.0445826 0.0440306 0.0440503 0.044602 0.0446364 0.0435596 0.0436627 0.0439738 0.0435154 0.0446695] atol = 1e-1
    @test d == 1
    @test r == 1
    @test diffusionCIs ≈ [225.736 307.264] atol = 1e-1
    @test reactionCIs ≈ [0.0433172 0.0446579] atol = 1e-1
    Du_vals, Ru_vals, u_vals = curve_values(bgp3; level=0.05, x_scale=x_scale, t_scale=t_scale)
    @test Du_vals[1][[1, 2, 4, 100, 191, 500]] ≈ vec([266.48878959790477
        266.48878959790477
        266.48878959790477
        266.48878959790477
        266.48878959790477
        266.48878959790477]) atol = 1e-1
    @test Du_vals[2][[1, 2, 4, 100, 192, 200, 201, 297, 500]] ≈ vec([225.73603304470163
        225.73603304470163
        225.73603304470163
        225.73603304470163
        225.73603304470163
        225.73603304470163
        225.73603304470163
        225.73603304470163
        225.73603304470163]) atol = 1e-1
    @test Du_vals[3][[1, 2, 100, 50, 199, 201, 499, 500]] ≈ vec([307.2636423705275
        307.2636423705275
        307.2636423705275
        307.2636423705275
        307.2636423705275
        307.2636423705275
        307.2636423705275
        307.2636423705275]) atol = 1e-1
    soln_vals_mean, soln_vals_lower, soln_vals_upper = pde_values(pde_data3, bgp3)
    @test soln_vals_mean[[1, 2, 3, 50, 101, 171, 199, 500], [1, 2, 3, 4, 5]] ≈ [301.848 433.549 611.532 821.779 1037.42
        301.848 433.526 611.54 821.789 1037.15
        301.848 433.408 611.455 821.722 1037.37
        271.971 396.557 580.1 793.204 1011.86
        229.257 356.364 519.848 717.775 931.644
        128.11 192.571 304.829 462.105 659.537
        56.3149 117.379 208.61 343.373 524.403
        366.906 528.366 729.429 935.51 1128.37] atol = 1e-1
    @test soln_vals_lower[[1, 2, 49, 191, 201, 297, 299, 301, 302], :] ≈ [301.848 431.604 606.701 813.143 1025.82
        301.848 431.589 606.724 813.04 1025.52
        266.853 394.021 574.328 784.039 1000.43
        69.0421 134.103 225.368 360.555 540.754
        53.5546 109.687 195.065 321.821 494.385
        31.1051 54.4342 91.3254 148.214 236.765
        29.9753 51.7026 87.8814 143.836 231.473
        28.8454 49.0386 84.4013 139.459 226.26
        28.2805 47.7601 82.6885 137.285 223.654] atol = 1e-1
    @test soln_vals_upper[[1, 2, 100, 101, 102, 499, 497, 391, 201, 500], :] ≈ [301.848 436.027 617.066 830.711 1048.48
        301.848 436.004 617.078 830.498 1048.32
        228.767 359.445 526.687 728.697 945.706
        229.257 358.346 524.969 726.488 943.365
        229.747 357.216 523.197 724.319 941.0
        362.742 531.184 735.731 944.841 1139.17
        354.413 531.179 735.505 944.502 1138.81
        29.5665 100.913 208.471 359.292 552.282
        53.5546 116.341 210.503 348.879 533.916
        366.906 531.161 735.642 945.753 1140.02] atol = 1e-1
    err_CI = error_comp(bgp3, pde_data3, x_pde, t_pde, u_pde)
    @test err_CI ≈ vec([2.04274318873692
        2.9450531117318204]) atol = 1e-1
    soln_vals_mean, soln_vals_lower, soln_vals_upper = pde_values(pde_gp3, bgp3)
    @test soln_vals_mean[[1, 5, 10, 100, 192, 201, 202, 209, 378, 491, 399, 500], :] ≈ [289.325 418.386 599.088 811.138 1028.99
        285.18 418.12 598.904 810.983 1028.85
        279.999 416.987 598.254 810.437 1028.07
        239.84 361.75 524.729 722.501 935.805
        75.4822 137.557 234.752 376.583 563.879
        64.1703 119.842 209.854 343.762 524.532
        62.9135 118.132 207.367 340.383 520.369
        55.3226 107.675 191.627 318.362 492.571
        12.5968 63.3568 142.986 267.017 440.405
        363.652 532.109 724.322 926.672 1119.31
        81.7425 158.376 272.198 428.301 622.211
        353.021 533.698 727.57 930.732 1122.49] atol = 1e-1
    @test soln_vals_lower[1:30, :] ≈ [257.122 395.124 577.628 792.427 1013.33
        257.098 394.98 577.646 792.578 1013.23
        256.971 395.114 577.608 792.399 1013.29
        256.844 394.961 577.605 792.522 1013.16
        256.718 395.084 577.546 792.317 1013.19
        256.591 394.923 577.523 792.412 1013.02
        256.464 395.036 577.444 792.179 1013.02
        256.337 394.867 577.401 792.246 1012.82
        256.211 394.969 577.301 791.987 1012.78
        256.084 394.794 577.238 792.025 1012.54
        255.957 394.885 577.119 791.739 1012.47
        255.83 394.705 577.035 791.749 1012.2
        255.704 394.786 576.896 791.437 1012.09
        255.577 394.601 576.793 791.418 1011.79
        255.375 394.672 576.635 791.08 1011.64
        255.049 394.474 576.512 791.032 1011.31
        254.724 394.449 576.336 790.668 1011.13
        254.398 394.116 576.193 790.592 1010.76
        254.292 394.07 575.998 790.202 1010.54
        254.244 393.728 575.811 790.096 1010.14
        254.195 393.662 575.54 789.681 1009.89
        254.147 393.313 575.287 789.545 1009.45
        254.078 393.229 574.992 789.105 1009.17
        253.843 392.875 574.715 788.939 1008.7
        253.609 392.774 574.398 788.474 1008.37
        253.374 392.418 574.098 788.278 1007.87
        253.14 392.302 573.76 787.788 1007.51
        252.905 391.945 573.437 787.562 1006.97
        252.671 391.785 573.077 787.013 1006.57
        252.436 391.36 572.733 786.664 1006.0] atol = 1e-1
    @test soln_vals_upper[[1:5..., 391, 392, 400, 500], :] ≈ [332.132 441.002 619.679 829.624 1044.2
        329.248 440.758 619.943 829.495 1044.0
        326.364 440.83 619.595 829.56 1044.16
        323.48 440.417 619.776 829.367 1043.92
        320.595 440.32 619.341 829.367 1044.04
        67.004 135.321 244.189 400.056 598.057
        70.4529 140.352 250.757 408.003 606.501
        101.707 183.437 305.728 472.423 674.771
        370.118 548.693 745.242 950.373 1140.9] atol = 1e-1
    err_CI = error_comp(bgp3, pde_gp3, x_pde, t_pde, u_pde)
    @test err_CI ≈ vec([3.4774856790511137
        6.150873537957717]) atol = 1e-1
    res = compare_AICs(x_pde, t_pde, u_pde, bgp3, bgp3)
    @test res ≈ [1.0 0.0 0.0
        1.0 0.0 0.0] atol = 1e-1
end

#(:diffusionBases, :reactionBases, :gp, :zvals, :Xₛ, :Xₛⁿ, :bootₓ, :bootₜ, :D, :D′, :R, :R′, :D_params, :R_params, :μ, 
#:L, :gp_setup, :bootstrap_setup, :pde_setup)